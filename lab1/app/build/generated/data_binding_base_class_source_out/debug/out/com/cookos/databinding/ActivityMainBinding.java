// Generated by view binder compiler. Do not edit!
package com.cookos.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TableLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.cookos.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView answer;

  @NonNull
  public final Button clear;

  @NonNull
  public final Button clearAll;

  @NonNull
  public final Button cos;

  @NonNull
  public final Button divide;

  @NonNull
  public final Button dot;

  @NonNull
  public final Button eight;

  @NonNull
  public final Button equals;

  @NonNull
  public final TextView expression;

  @NonNull
  public final Button five;

  @NonNull
  public final Button four;

  @NonNull
  public final ImageView imageView3;

  @NonNull
  public final Button leftBracket;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final Button memoryClear;

  @NonNull
  public final Button memoryMinus;

  @NonNull
  public final Button memoryPlus;

  @NonNull
  public final Button memoryReturn;

  @NonNull
  public final Button memorySave;

  @NonNull
  public final Button minus;

  @NonNull
  public final Button multiply;

  @NonNull
  public final Button nine;

  @NonNull
  public final Button one;

  @NonNull
  public final Button plus;

  @NonNull
  public final Button rightBracket;

  @NonNull
  public final Button seven;

  @NonNull
  public final Button sin;

  @NonNull
  public final Button six;

  @NonNull
  public final TableLayout tableLayout;

  @NonNull
  public final Button three;

  @NonNull
  public final Button two;

  @NonNull
  public final Button zero;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull TextView answer,
      @NonNull Button clear, @NonNull Button clearAll, @NonNull Button cos, @NonNull Button divide,
      @NonNull Button dot, @NonNull Button eight, @NonNull Button equals,
      @NonNull TextView expression, @NonNull Button five, @NonNull Button four,
      @NonNull ImageView imageView3, @NonNull Button leftBracket,
      @NonNull LinearLayout linearLayout, @NonNull Button memoryClear, @NonNull Button memoryMinus,
      @NonNull Button memoryPlus, @NonNull Button memoryReturn, @NonNull Button memorySave,
      @NonNull Button minus, @NonNull Button multiply, @NonNull Button nine, @NonNull Button one,
      @NonNull Button plus, @NonNull Button rightBracket, @NonNull Button seven,
      @NonNull Button sin, @NonNull Button six, @NonNull TableLayout tableLayout,
      @NonNull Button three, @NonNull Button two, @NonNull Button zero) {
    this.rootView = rootView;
    this.answer = answer;
    this.clear = clear;
    this.clearAll = clearAll;
    this.cos = cos;
    this.divide = divide;
    this.dot = dot;
    this.eight = eight;
    this.equals = equals;
    this.expression = expression;
    this.five = five;
    this.four = four;
    this.imageView3 = imageView3;
    this.leftBracket = leftBracket;
    this.linearLayout = linearLayout;
    this.memoryClear = memoryClear;
    this.memoryMinus = memoryMinus;
    this.memoryPlus = memoryPlus;
    this.memoryReturn = memoryReturn;
    this.memorySave = memorySave;
    this.minus = minus;
    this.multiply = multiply;
    this.nine = nine;
    this.one = one;
    this.plus = plus;
    this.rightBracket = rightBracket;
    this.seven = seven;
    this.sin = sin;
    this.six = six;
    this.tableLayout = tableLayout;
    this.three = three;
    this.two = two;
    this.zero = zero;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.answer;
      TextView answer = ViewBindings.findChildViewById(rootView, id);
      if (answer == null) {
        break missingId;
      }

      id = R.id.clear;
      Button clear = ViewBindings.findChildViewById(rootView, id);
      if (clear == null) {
        break missingId;
      }

      id = R.id.clearAll;
      Button clearAll = ViewBindings.findChildViewById(rootView, id);
      if (clearAll == null) {
        break missingId;
      }

      id = R.id.cos;
      Button cos = ViewBindings.findChildViewById(rootView, id);
      if (cos == null) {
        break missingId;
      }

      id = R.id.divide;
      Button divide = ViewBindings.findChildViewById(rootView, id);
      if (divide == null) {
        break missingId;
      }

      id = R.id.dot;
      Button dot = ViewBindings.findChildViewById(rootView, id);
      if (dot == null) {
        break missingId;
      }

      id = R.id.eight;
      Button eight = ViewBindings.findChildViewById(rootView, id);
      if (eight == null) {
        break missingId;
      }

      id = R.id.equals;
      Button equals = ViewBindings.findChildViewById(rootView, id);
      if (equals == null) {
        break missingId;
      }

      id = R.id.expression;
      TextView expression = ViewBindings.findChildViewById(rootView, id);
      if (expression == null) {
        break missingId;
      }

      id = R.id.five;
      Button five = ViewBindings.findChildViewById(rootView, id);
      if (five == null) {
        break missingId;
      }

      id = R.id.four;
      Button four = ViewBindings.findChildViewById(rootView, id);
      if (four == null) {
        break missingId;
      }

      id = R.id.imageView3;
      ImageView imageView3 = ViewBindings.findChildViewById(rootView, id);
      if (imageView3 == null) {
        break missingId;
      }

      id = R.id.leftBracket;
      Button leftBracket = ViewBindings.findChildViewById(rootView, id);
      if (leftBracket == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.memoryClear;
      Button memoryClear = ViewBindings.findChildViewById(rootView, id);
      if (memoryClear == null) {
        break missingId;
      }

      id = R.id.memoryMinus;
      Button memoryMinus = ViewBindings.findChildViewById(rootView, id);
      if (memoryMinus == null) {
        break missingId;
      }

      id = R.id.memoryPlus;
      Button memoryPlus = ViewBindings.findChildViewById(rootView, id);
      if (memoryPlus == null) {
        break missingId;
      }

      id = R.id.memoryReturn;
      Button memoryReturn = ViewBindings.findChildViewById(rootView, id);
      if (memoryReturn == null) {
        break missingId;
      }

      id = R.id.memorySave;
      Button memorySave = ViewBindings.findChildViewById(rootView, id);
      if (memorySave == null) {
        break missingId;
      }

      id = R.id.minus;
      Button minus = ViewBindings.findChildViewById(rootView, id);
      if (minus == null) {
        break missingId;
      }

      id = R.id.multiply;
      Button multiply = ViewBindings.findChildViewById(rootView, id);
      if (multiply == null) {
        break missingId;
      }

      id = R.id.nine;
      Button nine = ViewBindings.findChildViewById(rootView, id);
      if (nine == null) {
        break missingId;
      }

      id = R.id.one;
      Button one = ViewBindings.findChildViewById(rootView, id);
      if (one == null) {
        break missingId;
      }

      id = R.id.plus;
      Button plus = ViewBindings.findChildViewById(rootView, id);
      if (plus == null) {
        break missingId;
      }

      id = R.id.rightBracket;
      Button rightBracket = ViewBindings.findChildViewById(rootView, id);
      if (rightBracket == null) {
        break missingId;
      }

      id = R.id.seven;
      Button seven = ViewBindings.findChildViewById(rootView, id);
      if (seven == null) {
        break missingId;
      }

      id = R.id.sin;
      Button sin = ViewBindings.findChildViewById(rootView, id);
      if (sin == null) {
        break missingId;
      }

      id = R.id.six;
      Button six = ViewBindings.findChildViewById(rootView, id);
      if (six == null) {
        break missingId;
      }

      id = R.id.tableLayout;
      TableLayout tableLayout = ViewBindings.findChildViewById(rootView, id);
      if (tableLayout == null) {
        break missingId;
      }

      id = R.id.three;
      Button three = ViewBindings.findChildViewById(rootView, id);
      if (three == null) {
        break missingId;
      }

      id = R.id.two;
      Button two = ViewBindings.findChildViewById(rootView, id);
      if (two == null) {
        break missingId;
      }

      id = R.id.zero;
      Button zero = ViewBindings.findChildViewById(rootView, id);
      if (zero == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, answer, clear, clearAll, cos,
          divide, dot, eight, equals, expression, five, four, imageView3, leftBracket, linearLayout,
          memoryClear, memoryMinus, memoryPlus, memoryReturn, memorySave, minus, multiply, nine,
          one, plus, rightBracket, seven, sin, six, tableLayout, three, two, zero);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
